#!/usr/bin/env python
"""
pge-tod by Preston Hunt <me@prestonhunt.com>

Compare time-of-day cost versus basic rate for Portland General Electric's Time
of Day program.
"""

import argparse
import csv
import sys

from collections import Counter
from datetime import datetime, date
from decimal import Decimal as D
from types import SimpleNamespace

RATES = {
    date(2025, 1, 1): {
        'off': D('9.08'),
        'mid': D('16.99'),
        'on': D('43.89'),
        'basic': D('20.86')
    },
    date(2024, 1, 1): {
        'off': D('8.39'),
        'mid': D('15.77'),
        'on': D('41.11'),
        'basic': D('19.45')
    },
    date(1970, 1, 1): {
        'off': D('7.43'),
        'mid': D('11.9'),
        'on': D('32.8'),
        'basic': D('14.52')
    },
}


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('csv_paths', nargs='*', help='csv files from portlandgeneral to process')
    return parser.parse_args()


def main():
    for path in ARGS.csv_paths:
        print(compare_tod_to_basic(path))


def skip_leader(path):
    skipping = True
    with open(path, newline='') as f:
        for line in f:
            if skipping and line.count(",") > 5:
                skipping = False
            if not skipping:
                yield line


def get_tod_category(d: datetime) -> str:
    if is_pge_holiday(d):
        return 'off'
    if d.weekday() in [5, 6]:  # Sat or Sun
        return 'off'
    if d.hour < 7 or d.hour >= 21:
        return 'off'
    if d.hour >= 7 and d.hour < 17:
        return 'mid'
    return 'on'


def is_pge_holiday(d: datetime) -> bool:
    # Off-peak on: 1/1, 7/4, Christmas, Memorial Day, Labor Day, Thanksgiving
    holidays = [(1, 1), (7, 4), (12, 25)]
    if (d.month, d.day) in holidays:
        return True

    # Memorial Day, last Monday of May
    if d.month == 5 and d.weekday() == 0 and d.day >= 25:
        return True

    # Labor Day, first Monday of September
    if d.month == 9 and d.weekday() == 0 and d.day <= 7:
        return True

    return False


def get_tod_rate(normrow) -> D:
    for effective_on, rates in RATES.items():
        if normrow.starttime.date() >= effective_on:
            return rates[normrow.tod_category]
    raise Fail("did not find a TOD rate")


def get_basic_rate(normrow) -> D:
    if normrow.starttime < datetime(2024, 1, 1):
        return OLD_TOD_RATES['basic']
    return NEW_TOD_RATES['basic']


def normalize_row(row: dict) -> SimpleNamespace:
    # PGE has used multiple formats, including:
    #
    #    TYPE,DATE,START TIME,END TIME,USAGE,UNITS,DEMAND,UNITS,COST,NOTES
    #    Electric usage,2023-10-10,00:00,00:14,0.38,KWH,1.52,KW,$0.05
    #
    #    TYPE,DATE,START TIME,END TIME,USAGE (kWh),COST,NOTES
    #    Electric usage,2024-01-11,00:00,00:14,0.45,$0.03

    # Find out the field name for usage
    for field in row.keys():
        if 'usage' in field.lower():
            usage_field = field
            break
    else:
        raise Exception("unsupported or invalid CSV format, unable to find USAGE field")

    result = SimpleNamespace()
    result.starttime = datetime.strptime(row['DATE'] + ' ' + row['START TIME'], "%Y-%m-%d %H:%M")
    result.usage_kwh = D(row[usage_field])

    # As of 2024-02-05, the charged amount from PGE's CSV report is completely wrong.
    # Won't include it until it is more accurate
    # result.charged_cents = int(float(row['COST'].lstrip('$')) * 100)
    result.tod_category = get_tod_category(result.starttime)
    # kWh is provided with 2 significant digits; thus round the output to the same number of digits
    result.tod_rate = get_tod_rate(result)
    result.tod_cost_cents = result.tod_rate * result.usage_kwh
    result.basic_rate = get_basic_rate(result)
    result.basic_cost_cents = result.basic_rate * result.usage_kwh
    return result


def compare_tod_to_basic(path) -> SimpleNamespace:
    print("processing", path)
    skip_iter = skip_leader(path)
    reader = csv.DictReader(skip_iter)
    tod_cost = D(0)
    basic_cost = D(0)
    kwh_by_peak: Counter[D] = Counter()
    earliest = None
    latest = None
    n = 0
    for row in reader:
        n += 1

        normrow = normalize_row(row)

        if earliest is None or normrow.starttime < earliest:
            earliest = normrow.starttime
        if latest is None or normrow.starttime > latest:
            latest = normrow.starttime

        kwh_by_peak[normrow.tod_category] += normrow.usage_kwh

        tod_cost += normrow.tod_cost_cents
        basic_cost += normrow.basic_cost_cents
        print("\t", normrow)
    return SimpleNamespace(earliest=earliest,
                           latest=latest,
                           n=n,
                           kwh_by_peak=kwh_by_peak,
                           tod_cost_usd=round(tod_cost / 100, 2),
                           basic_cost_usd=round(basic_cost / 100, 2))


class Fail(Exception):
    pass


if __name__ == '__main__':
    try:
        # Command-line arguments are considered as immutable constants of the
        # universe, and thus are globally available in this script.
        ARGS = parse_args()
        main()
    except Fail as f:
        print(*f.args, file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print("Ctrl+C")
